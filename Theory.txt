Разница между библиотекой и фреймворком:

Библиотеки можно подключать в неограниченном количестве, они часто решают какие-то узкие задачи. Можно использовать в едином коде
как функции библиотеки, так и чистый js

Фреймворк определяет наперед стиль и функционал твоего приложения. Код пишется по правилам этого фреймворка и использует заложенные в нем функции, как из библиотеки



Фреймворки:

    Позволяют создавать приложения в браузере - Single Page Application (SPA). Пользователь открывает страницу и сколько угодно на ней работает. 
    Например - Figma, гугл таблицы, гугл почта, aviasales 
    Важно - страница при этом не перезагружается, ни на какие другие вкладки вкладки переходов нет, весь функционал внутри приложения

Самые популярные библиотеки и фреймворки: 

Angular - фреймворк
Работает на TypeScript, но необязательно его знать, тк он компилируется в js, а фреймворк понимает простой js и можно писать на нем
Очень сильный фреймворк, но самый тяжелый из 3-х.
Также порог вхождения самый высокий, даже по сравнению с реактом, так как много в себя включает.
Перпективы хорошие, разработчик - Google, постоянно обновляется, но по трендам уступает реакту
    Что необходимо понимать/знать/выучить, чтобы начать работать:
        -  node.js  - установить
        -  TypeScript  - хотя бы начальные знания, чтобы банально понимать документацию
        -  Webpack   - надо понимать, что это такое, так как проекты всегда придется собирать
        -  MVC pattern - шаблон проектирования для создания приложений. Разделяет логику приложения на 
            визуальную, контролирующую, выполняющую какие-то действия (это теория, надо читать)
        -  Angular   - сам фреймворк, его документация, функции, возможности.


React - библиотека
Можно использовать совместно с разными другими пакетами в рамках одного проекта. В своем коде "смешивает" js и HTML (так называемый препроцессор JSX). 
Как и в Angular, можно писать на нативном js, но это неправильно, тк если привыкнуть к JSX, то этот подход очень удобен и намного быстрее и эффективнее.
Разработчик - faceBook, активная поддержка и развитие.
По трендам и вакансиям реакт на 1 месте
    Что необходимо понимать/знать/выучить, чтобы начать работать:
        -  node.js  - установить
        -  JSX  - надо освоить синтаксис, научиться применять
        -  Babel - не только переводит код из нового стандарта в старый, но и служит для перевода "других" синтаксисов 
                в нативный js
        -  Webpack
        -  React - есть документация на Русском 


Vue - фреймворк
Самый молодой. По особенному добавляются модули (в одном фрагменте js кода модуль содержит сначала верстку, потом скрипт, потом css).
Быстро и активно развивается и активно используется. Одна из причин - простота освоения
    Что необходимо понимать/знать/выучить, чтобы начать работать:
        -  node.js  - установить
        -  js - естественно знание нативного js, как и везде
        -  Webpack
        -  Vue



Для больших крупных проектов с перспективой роста - Angular подойдет лучше прочего

Гибкость, настройка под себя, под какой-то проект, скорость работы, пишем код на чистом js (смешивая с рtml) - React

Чистый, легкий код - Vue




     React


Существуют два подхода создания кода/проекта : декларативный и императивный
Реакт - декларативный

- Декларативный подход - говорит, какой результат нам нужен 
- Императивный подход - говорит как именно дойти к результату, конкретные шаги

Пример: создание модального окна
Императивный подход говорит о том, что у нас есть кнопка, пользователь ее нажимает, открывается окно и тд. (шаги к достижению цели)
Декларативный - Модальное окно в ходе каких-то действий должно быть открыто. Как именно - не так важно.

Плюсы использования реакта:
    - Препроцессор JSX (смесь HTML и js)
    - в реакте есть алгоритм, отслеживающий какие компоненты изменились и обновлять/изменять только их, без обновления всего сайта/приложения (алгоритм сравнения)
    - технология virtual DOM. 
        Суть технологии в том, что все теги обычного DOM дерева (h1, span, div и тд) представляют из себя объекты со всеми свойствами, 
    которыми могут обладать эти теги. Например у заголовка h1 - сотни доступных свойств, есть еще свойство .style, которое дополнительно внутри содержит
    не меньше свойств. Даже если мы воспользуемся только одним свойством или не воспользуемся вообще - DOM структура все равно будет содержать объект с записанными
    пустыми свойствами, а это очень большой объект в любом случае. 
        Соответственно, если у нас большое приложение/сайт - огромное количество элементов в исходном DOM дереве сильно снизит производительность и оптимизацию.
        Технология virtual DOM - позволяет на базе реакта создавать и добавлять в DOM дерево такие же теги, но в разы меньше - содержащие только необходимые и 
        использованные свойства, что сильно экономит ресурсы браузера
